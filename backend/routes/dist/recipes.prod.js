"use strict";function ownKeys(r,e){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);e&&(o=o.filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(r){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(t,!0).forEach(function(e){_defineProperty(r,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):ownKeys(t).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))})}return r}function _defineProperty(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var express=require("express"),Recipe=require("../models/recipe"),router=express.Router();router.post("",function(e,r,t){e.protocol,e.get("host");var o=new Recipe({title:e.body.title,description:e.body.description,isVegan:"true"===e.body.isVegan});console.log("\nthis recipe will be added to db: "),console.log(o),o.save().then(function(e){r.status(201).json({message:"recipe added sucessfuly",recipe:_objectSpread({},e,{id:e._id})})})}),router.get("",function(e,r,t){Recipe.find().then(function(e){console.log("recipes fetcheddd!!! :)"),r.status(200).json({message:"recipes fetched succesfully :)",recipes:e})}).catch(function(e){console.log("could not fetch recipes!")})}),module.exports=router;