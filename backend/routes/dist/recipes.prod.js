"use strict";function ownKeys(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,o)}return r}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(r,!0).forEach(function(e){_defineProperty(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var express=require("express"),Recipe=require("../models/recipe"),router=express.Router();router.post("",function(e,t,r){e.protocol,e.get("host");var o=new Recipe({title:e.body.title,description:e.body.description,isVegan:e.body.isVegan});console.log("\nthis recipe is added to db: "),console.log(o),o.save().then(function(e){t.status(201).json({message:"recipe added sucessfuly",post:_objectSpread({},e,{id:e._id})})})}),router.get("",function(e,t,r){Post.find().then(function(e){console.log("recipes fetcheddd!!! :)"),t.status(200).json({message:"recipes fetched succesfully :)",recipes:e})}).catch(function(e){console.log("could not fetch recipes!")})}),module.exports=router;